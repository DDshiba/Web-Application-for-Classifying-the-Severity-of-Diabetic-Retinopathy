import os
import datetime
import cv2
import numpy as np
import tensorflow as tf
from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image
import io
from tensorflow.keras.applications.efficientnet import preprocess_input

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask App
app = Flask(__name__)
CORS(app)

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
BASE_DIR = os.path.dirname(os.path.abspath(__file__))  
MODEL_PATH = os.path.join(BASE_DIR, "model", "EfficientNetB0_AdamW_freeze100__lr0_00001_1024512_tanh_RGB.keras")
UPLOAD_FOLDER = os.path.join(BASE_DIR, "uploads")  
PROCESSED_FOLDER = os.path.join(BASE_DIR, "processed")  
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(PROCESSED_FOLDER, exist_ok=True)

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• EfficientNetB0
model = None
if os.path.exists(MODEL_PATH):
    print(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà: {MODEL_PATH}")
    try:
        model = tf.keras.models.load_model(MODEL_PATH)
        print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‚ùå ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
else:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà: {MODEL_PATH}")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö Contrast ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ CLAHE (RGB)
def apply_clahe_rgb(image):
    """
    ‡πÉ‡∏ä‡πâ CLAHE ‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ R, G, B ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û RGB
    """
    rgb_img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å BGR ‚Üí RGB
    r, g, b = cv2.split(rgb_img)  # ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ

    # ‚úÖ ‡πÉ‡∏ä‡πâ CLAHE ‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ
    clahe = cv2.createCLAHE(clipLimit=2.5, tileGridSize=(12, 12))
    r_clahe = clahe.apply(r)
    g_clahe = clahe.apply(g)
    b_clahe = clahe.apply(b)

    # ‚úÖ ‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û RGB
    clahe_rgb_img = cv2.merge((r_clahe, g_clahe, b_clahe))
    return clahe_rgb_img

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏£‡∏µ‡πÇ‡∏û‡∏£‡πÄ‡∏ã‡∏™‡∏ã‡∏¥‡∏á‡∏†‡∏≤‡∏û
def preprocess_image(image, save_path=None):
    """
    1. ‡∏£‡∏µ‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏õ‡πá‡∏ô (224, 224)
    2. ‡πÉ‡∏ä‡πâ CLAHE ‡∏õ‡∏£‡∏±‡∏ö Contrast
    3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô Normalize
    4. Normalize ‡πÅ‡∏ö‡∏ö EfficientNetB0 (‡πÉ‡∏ä‡πâ preprocess_input())
    """
    image = cv2.resize(image, (224, 224), interpolation=cv2.INTER_AREA)  # Resize
    image = apply_clahe_rgb(image)  # ‡πÉ‡∏ä‡πâ CLAHE

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô Normalize (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
    if save_path:
        cv2.imwrite(save_path, cv2.cvtColor(image, cv2.COLOR_RGB2BGR))

    image = image.astype("float32") / 255.0  # Normalize ‡πÄ‡∏õ‡πá‡∏ô [0,1]
    image = preprocess_input(image * 255.0)  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
    image = np.expand_dims(image, axis=0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° batch dimension

    return image

# ‚úÖ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á DR ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
CLASS_LABELS = {
    0: {"label": "0_No_DR", "description": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", "level": 0},
    1: {"label": "1_Mild", "description": "‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡∏ï‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "level": 1},
    2: {"label": "2_Moderate", "description": "‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡∏ï‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "level": 2},
    3: {"label": "3_Severe", "description": "‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡∏ï‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á", "level": 3},
    4: {"label": "4_Proliferative_DR", "description": "‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡∏ï‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å", "level": 4},
}

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤ Softmax Output ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
def format_output(predictions, predicted_class):
    output_text = "\nüìä ‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏û‡∏∏‡∏ï‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•:\n"
    for i, prob in enumerate(predictions[0]):  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å batch
        output_text += f"‡∏Ñ‡∏•‡∏≤‡∏™ {i} ({CLASS_LABELS[i]['label']}) ‚Üí {prob:.6f} (‚âà {prob*100:.2f}%)"
        if i == predicted_class:
            output_text += " ‚úÖ (‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ)"
        output_text += "\n"
    return output_text
   
# ‚úÖ API ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å React ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏•‡∏±‡∏ö
@app.route("/analyze", methods=["POST"])
def analyze():
    if model is None:
        return jsonify({"error": "‚ùå ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á"}), 500

    try:
        # ‚úÖ ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å React
        file = request.files.get("file")
        if not file:
            return jsonify({"error": "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"}), 400

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Bytes
        img = Image.open(io.BytesIO(file.read())).convert("RGB")
        img_cv = np.array(img)[:, :, ::-1]  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á RGB ‚Üí BGR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenCV

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
        original_img_path = os.path.join(UPLOAD_FOLDER, f"uploaded_{timestamp}.png")
        img.save(original_img_path)

        # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏ò‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô CLAHE
        processed_img_path = os.path.join(PROCESSED_FOLDER, f"processed_{timestamp}.png")

        # ‚úÖ ‡∏û‡∏£‡∏µ‡πÇ‡∏û‡∏£‡πÄ‡∏ã‡∏™‡∏†‡∏≤‡∏û ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        processed_img = preprocess_image(img_cv, save_path=processed_img_path)

        # ‚úÖ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•
        predictions = model.predict(processed_img)
        predicted_class = int(np.argmax(predictions))  
        confidence = float(np.max(predictions))  
        predicted_info = CLASS_LABELS[predicted_class]

        # ‚úÖ Debug Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        print("\nüîç DEBUG LOG")
        print(f"üì• ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {img.size}")
        print(f"üíæ ‡∏£‡∏π‡∏õ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {original_img_path}") 
        print(f"üé® ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏µ‡πÑ‡∏ã‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö Contrast ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {processed_img_path}") 
        print(f"üîÑ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•: {processed_img.shape}")
        print(f"üîÑ Min-Max ‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•: {processed_img.min()} - {processed_img.max()}")
        print(f"üì§ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏û‡∏∏‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•: {predictions.shape}")  # ‚úÖ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô (1, 5)
        print(format_output(predictions, predicted_class))  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô format_output()
        print(f"‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ: {{'label': {predicted_info['label']}, 'confidence': {confidence}}}")
        print(f"üîÑ Min-Max ‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•: {processed_img.min()} - {processed_img.max()}")
        print(f"üîç Debug: label={predicted_info['label']}, level={predicted_info['level']}")

        # ‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ React
        response = {
            "label": predicted_info["label"],
            "confidence": confidence,
            "description": predicted_info["description"],
            "level": predicted_info["level"],
            "input_shape": str(processed_img.shape),
            "output_shape": str(predictions.shape),
            "original_size": img.size,
            "original_image": original_img_path,
            "processed_image": processed_img_path
        }
        return jsonify(response)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ‚úÖ ‡∏£‡∏±‡∏ô Backend
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
